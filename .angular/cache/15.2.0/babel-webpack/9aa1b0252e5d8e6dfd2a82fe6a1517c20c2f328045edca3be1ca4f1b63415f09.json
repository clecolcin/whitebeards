{"ast":null,"code":"import { Subject, EMPTY, throwError, timer } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class DataRepositoryService {\n  constructor() {\n    this.currentUser = null;\n  }\n  getCatalog() {\n    const subject = new Subject();\n    const classes = this.currentUser?.classes || [];\n    const catalogWithEnrollmentStatus = COURSE_CATALOG.map(catalogClass => {\n      return {\n        ...catalogClass,\n        enrolled: classes.includes(catalogClass.classId)\n      };\n    });\n    setTimeout(() => {\n      subject.next(catalogWithEnrollmentStatus);\n      subject.complete();\n    }, 200);\n    return subject;\n  }\n  saveUser(user) {\n    user.classes = user.classes || [];\n    this.currentUser = user;\n    return timer(1000);\n  }\n  enroll(classId) {\n    if (!this.currentUser) return throwError(() => new Error('User not signed in'));\n    if (this.currentUser.classes.includes(classId)) return throwError(() => new Error('Already enrolled'));\n    this.currentUser.classes.push(classId);\n    return timer(1000);\n  }\n  drop(classId) {\n    if (!this.currentUser) return throwError(() => new Error('User not signed in'));\n    if (!this.currentUser.classes.includes(classId)) return throwError(() => new Error('Not enrolled'));\n    this.currentUser.classes = this.currentUser.classes.filter(c => c !== classId);\n    return timer(1000);\n  }\n  signIn(credentials) {\n    //Never, ever check credentials in client-side code.\n    //This code is only here to supply a fake endpoint for signing in.\n    if (credentials.email !== 'me@whitebeards.edu' || credentials.password !== 'super-secret') return throwError(() => new Error('Invalid login'));\n    this.currentUser = {\n      userId: 'e61aebed-dbc5-437a-b514-02b8380d8efc',\n      firstName: 'Jim',\n      lastName: 'Cooper',\n      email: 'me@whitebeards.edu',\n      classes: []\n    };\n    return EMPTY;\n  }\n}\nDataRepositoryService.ɵfac = function DataRepositoryService_Factory(t) {\n  return new (t || DataRepositoryService)();\n};\nDataRepositoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataRepositoryService,\n  factory: DataRepositoryService.ɵfac\n});\nconst COURSES = [{\n  courseNumber: 'PO101',\n  courseName: 'Intro to Potions',\n  creditHours: 3,\n  description: '...'\n}, {\n  courseNumber: 'HIS105',\n  courseName: 'Ancient History of Magic',\n  creditHours: 4,\n  description: '...'\n}, {\n  courseNumber: 'CH101',\n  courseName: 'Intro to Charms',\n  creditHours: 2,\n  description: '...'\n}, {\n  courseNumber: 'CH205',\n  courseName: 'Creating Advanced Charms',\n  creditHours: 4,\n  description: '...'\n}, {\n  courseNumber: 'SP101',\n  courseName: 'Intro Spell Casting',\n  creditHours: 3,\n  description: '...'\n}, {\n  courseNumber: 'SP201',\n  courseName: 'Advanced Spell Casting',\n  creditHours: 4,\n  description: '...'\n}];\nconst COURSE_CATALOG = [{\n  classId: '24ab7b14-f935-44c1-b91b-8598123ea54a',\n  course: COURSES[0],\n  professor: 'Abramius Darksbayn',\n  seatsAvailable: 23,\n  days: 'MWF',\n  time: '11:00 AM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'cebbc5ba-f49a-4708-b3dc-51a346b3231e',\n  course: COURSES[0],\n  professor: 'Philosifus Siebrand',\n  seatsAvailable: 9,\n  days: 'MWF',\n  time: '12:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: '6130cdd4-071a-4559-8072-35f0fbec5516',\n  course: COURSES[0],\n  professor: 'Abramius Darksbayn',\n  seatsAvailable: 14,\n  days: 'THF',\n  time: '2:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'dd0343e9-50b2-4f1d-8b87-93c0b34f3d35',\n  course: COURSES[1],\n  professor: 'Antonia Clavell',\n  seatsAvailable: 28,\n  days: 'THF',\n  time: '11:00 AM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: '7277956e-795f-4c0f-9861-cf03635df5ea',\n  course: COURSES[2],\n  professor: 'Meriel Dufaux',\n  seatsAvailable: 28,\n  days: 'MW',\n  time: '10:00 AM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: '76d31fdc-e398-4d17-872b-e8222407e755',\n  course: COURSES[3],\n  professor: 'Adranus Klaus',\n  seatsAvailable: 28,\n  days: 'THF',\n  time: '1:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'd8bf81f4-3945-4a55-b5c4-663012246873',\n  course: COURSES[4],\n  professor: 'Ragnvald Graupnar',\n  seatsAvailable: 28,\n  days: 'MWF',\n  time: '12:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'c34b20fd-d2a0-4fb6-aeaa-2fc3a52e2e89',\n  course: COURSES[5],\n  professor: 'Philosifus Siebrand',\n  seatsAvailable: 28,\n  days: 'THF',\n  time: '11:00 AM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'c5e73546-5f3c-4de1-8819-fe5bd3b6ef7e',\n  course: COURSES[2],\n  professor: 'Phoebe Chabon',\n  seatsAvailable: 28,\n  days: 'WF',\n  time: '2:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'fcf0652f-58c0-4eeb-b040-3eddb29e49e3',\n  course: COURSES[3],\n  professor: 'Sycily Soule',\n  seatsAvailable: 28,\n  days: 'THF',\n  time: '1:00 PM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: 'bb0a6a48-062e-4927-8257-28eb5842c0a6',\n  course: COURSES[4],\n  professor: 'Heldebald Cincebeaux',\n  seatsAvailable: 28,\n  days: 'MTW',\n  time: '10:00 AM',\n  processing: false,\n  enrolled: false\n}, {\n  classId: '996901ca-614e-4b92-887e-12528c88b880',\n  course: COURSES[5],\n  professor: 'Gerlinda Weinschroot',\n  seatsAvailable: 28,\n  days: 'THF',\n  time: '11:00 AM',\n  processing: false,\n  enrolled: false\n}];","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}